<!DOCTYPE html>
<html lang="id">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ShopeePay Integration Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
      /*
      Custom styling to create a Google-like theme.
      Includes light and dark mode support.
    */
      body {
        font-family: 'Google Sans', 'Product Sans', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
        transition: background-color 0.3s ease, color 0.3s ease;
        /* Smooth transitions */
      }

      /* Light Mode Default Theme (for Menu) */
      body {
        background-color: #FBF0D9;
        /* Soft light background */
        color: #202124;
        /* Dark text color */
      }

      /* Differentiated backgrounds for UAT and Live */
      body.bg-uat {
        background-color: #E6F0FF;
        /* Light blue sky background */
      }

      body.bg-live {
        background-color: #FEE8E8;
        /* Soft pink background */
      }

      .card-container {
        background-color: #ffffff;
        /* Clean white card */
        border: 1px solid #dadce0;
        /* Subtle border */
      }

      .input-field {
        background-color: #f8f9fa;
        /* Lighter input background */
        border: 1px solid #dadce0;
        color: #202124;
      }

      .text-title {
        color: #202124;
      }

      .text-info {
        color: #5f6368;
        /* Softer gray for info text */
      }

      .action-btn {
        background-color: #1a73e8;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        margin: 8px;
        transition: background-color 0.2s ease, transform 0.1s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .action-btn:hover {
        background-color: #1557b0;
        transform: translateY(-2px);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
      }

      .action-btn:active {
        transform: translateY(0);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .size-selector {
        background-color: #f8f9fa;
        border: 1px solid #dadce0;
        border-radius: 6px;
        padding: 6px 12px;
        margin: 4px;
        cursor: pointer;
      }

      .qr-container {
        background-color: #ffffff;
        padding: 30px;
        border-radius: 12px;
        display: inline-block;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      .tab-container {
        display: flex;
        justify-content: center;
        margin-bottom: 24px;
        border-bottom: 1px solid #dadce0;
      }

      .tab {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 16px 24px;
        cursor: pointer;
        border-bottom: 3px solid transparent;
        transition: all 0.3s ease;
        min-width: 120px;
      }

      .tab:hover {
        background-color: #f8f9fa;
      }

      .tab.active {
        border-bottom-color: #1a73e8;
        background-color: #f8f9fa;
      }

      .tab-icon {
        width: 32px;
        height: 32px;
        margin-bottom: 8px;
        fill: #5f6368;
        transition: fill 0.3s ease;
      }

      .tab.active .tab-icon {
        fill: #1a73e8;
      }

      .tab-name {
        font-size: 14px;
        font-weight: 500;
        color: #5f6368;
        transition: color 0.3s ease;
      }

      .tab.active .tab-name {
        color: #1a73e8;
      }

      .page-content {
        display: none;
      }

      .page-content.active {
        display: block;
      }

      /* Modal/Popup styles */
      .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }

      .modal-content {
        background-color: #ffffff;
        padding: 32px;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        max-width: 500px;
        width: 90%;
        text-align: center;
      }

      .modal-title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 16px;
        color: #202124;
      }

      .modal-text {
        font-size: 16px;
        margin-bottom: 20px;
        color: #5f6368;
        line-height: 1.5;
      }

      .close-button {
        background-color: #5f6368;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        margin: 8px;
        transition: background-color 0.2s ease;
      }

      .close-button:hover {
        background-color: #3c4043;
      }

      /* --- Media query for Dark Mode --- */
      @media (prefers-color-scheme: dark) {
        body {
          background-color: #131314;
          /* Google's dark background */
          color: #e8eaed;
          /* Light text */
        }

        body.bg-uat {
          background-color: #0E1724;
          /* Darker blue */
        }

        body.bg-live {
          background-color: #250B0B;
          /* Darker red */
        }

        .card-container {
          background-color: #202021;
          /* Darker card color */
          border: 1px solid #3c4043;
          /* Darker border */
          box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
          /* Depth shadow */
        }

        .input-field {
          background-color: #303134;
          /* Dark input background */
          border: 1px solid #5f6368;
          color: #e8eaed;
        }

        .text-title {
          color: #e8eaed;
        }

        .text-info {
          color: #bdc1c6;
          /* Lighter gray for info */
        }

        .size-selector {
          background-color: #303134;
          border: 1px solid #5f6368;
          color: #e8eaed;
        }

        .qr-container {
          background-color: #303134;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

        .tab-container {
          border-bottom: 1px solid #3c4043;
        }

        .tab:hover {
          background-color: #303134;
        }

        .tab.active {
          background-color: #303134;
        }

        .tab-icon {
          fill: #bdc1c6;
        }

        .tab.active .tab-icon {
          fill: #8ab4f8;
        }

        .tab-name {
          color: #bdc1c6;
        }

        .tab.active .tab-name {
          color: #8ab4f8;
        }

        .tab.active {
          border-bottom-color: #8ab4f8;
        }

        .modal-content {
          background-color: #303134;
        }

        .modal-title {
          color: #e8eaed;
        }

        .modal-text {
          color: #bdc1c6;
        }

        /* Invert QR code colors for dark mode */
        #qrcodeUat canvas,
        #qrcodeLive canvas {
          filter: invert(1) hue-rotate(180deg);
        }
      }
    </style>
  </head>
  <body class="min-h-screen flex items-center justify-center p-4">
    <div class="card-container p-8 rounded-xl shadow-lg w-full max-w-md text-center">
      <!-- Main Menu Page -->
      <div id="main-menu" class="page-content active">
        <h1 class="text-3xl font-bold mb-6 text-title">ShopeePay Integration Tool</h1>
        <p class="text-info mb-8">Please select an environment to proceed.</p>
        <button id="show-uat" class="action-btn bg-blue-500 hover:bg-blue-600 w-full mb-4">Open UAT Tool</button>
        <button id="show-live" class="action-btn bg-red-500 hover:bg-red-600 w-full">Open Live Tool</button>
      </div>
      <!-- UAT Page -->
      <div id="uat-page" class="page-content">
        <div class="flex items-center justify-between mb-6">
          <button id="back-to-menu-uat" class="text-info text-sm flex items-center">
            <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg> Back to Menu </button>
          <h1 class="text-2xl font-bold text-title">UAT Integration Tool</h1>
          <div></div>
          <!-- Spacer -->
        </div>
        <!-- Feature Tabs for UAT -->
        <div class="tab-container">
          <div class="tab uat-feature-tab active" data-tab="uat-generate-qr">
            <svg class="tab-icon" viewBox="0 0 24 24">
              <path d="M3 11h8V3H3v8zm2-6h4v4H5V5zM13 3v8h8V3h-8zm6 6h-4V5h4v4zM3 21h8v-8H3v8zm2-6h4v4H5v-4zM18 13h-2v2h2v-2zM20 15h-2v2h2v-2zM22 13v2h-2v-2h2zM13 15h2v-2h-2v2zM15 17h-2v2h2v-2zM17 19h2v-2h-2v2zM19 21h2v-2h-2v2zM21 19v2h-2v-2h2z" />
            </svg>
            <span class="tab-name">Generate QR</span>
          </div>
          <div class="tab uat-feature-tab" data-tab="uat-account-linking">
            <svg class="tab-icon" viewBox="0 0 24 24">
              <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
            </svg>
            <span class="tab-name">Account Linking</span>
          </div>
        </div>
        <!-- UAT QR Tab Content -->
        <div id="uat-generate-qr-content" class="tab-content active">
          <input id="qrInputUat" type="text" placeholder="Enter text or URL" class="input-field w-full p-3 rounded mb-2 focus:outline-none focus:ring-2 focus:ring-blue-500" value="" />
          <p class="text-sm text-info mb-4"> QR code will be generated automatically as you type. </p>
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2 text-title">QR Code Size:</label>
            <select id="sizeSelectorUat" class="size-selector">
              <option value="200">Small (200x200px)</option>
              <option value="256" selected>Medium (256x256px)</option>
              <option value="400">Large (400x400px)</option>
              <option value="600">Extra Large (600x600px)</option>
            </select>
          </div>
          <div class="mt-6 flex justify-center">
            <div class="qr-container">
              <div id="qrcodeUat"></div>
            </div>
          </div>
          <div class="mt-6" id="downloadSectionUat" style="display: none;">
            <h3 class="text-lg font-semibold mb-3 text-title">Download QR Code</h3>
            <div class="flex flex-wrap justify-center">
              <button id="downloadPNGUat" class="action-btn">Download PNG</button>
              <button id="downloadSVGUat" class="action-btn">Download SVG</button>
              <button id="downloadPDFUat" class="action-btn">Download PDF</button>
            </div>
          </div>
        </div>
        <!-- UAT Account Linking Tab Content -->
        <div id="uat-account-linking-content" class="tab-content">
          <div class="py-6">
            <div class="text-center mb-6">
              <svg class="mx-auto mb-4 w-16 h-16 text-info" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
              </svg>
              <h3 class="text-xl font-semibold mb-4 text-title">Account Linking (UAT)</h3>
            </div>
            <div class="mb-6 text-left">
              <p class="text-sm text-info mb-4"> Input the <strong>auth_code</strong> that is generated from <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded text-xs font-mono italic">...v1.0/get-auth-code</code> here. </p>
              <p class="text-sm text-info mb-4"> e.g: <strong>168319834608511432</strong> and hit "Enter" or click "Initiate Account Linking" </p>
            </div>
            <div class="mb-6">
              <input id="authCodeInputUat" type="text" placeholder="Enter the auth-code here" class="input-field w-full p-3 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div class="text-center">
              <button id="proceedButtonUat" class="action-btn bg-green-600 hover:bg-green-700 w-full"> Initiate Account Linking </button>
            </div>
            <div class="mt-4 text-center">
              <p class="text-xs text-info"> reference: <a href="https://product.shopeepay.co.id/integration/api/account-linking/go/#initiate-account-linking" target="_blank" class="text-blue-600 hover:text-blue-800 underline">https://product.shopeepay.co.id/.../#initiate-account-linking</a>
              </p>
            </div>
          </div>
        </div>
      </div>
      <!-- Live Page -->
      <div id="live-page" class="page-content">
        <div class="flex items-center justify-between mb-6">
          <button id="back-to-menu-live" class="text-info text-sm flex items-center">
            <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg> Back to Menu </button>
          <h1 class="text-2xl font-bold text-title">Live Integration Tool</h1>
          <div></div>
          <!-- Spacer -->
        </div>
        <!-- Feature Tabs for Live -->
        <div class="tab-container">
          <div class="tab live-feature-tab active" data-tab="live-generate-qr">
            <svg class="tab-icon" viewBox="0 0 24 24">
              <path d="M3 11h8V3H3v8zm2-6h4v4H5V5zM13 3v8h8V3h-8zm6 6h-4V5h4v4zM3 21h8v-8H3v8zm2-6h4v4H5v-4zM18 13h-2v2h2v-2zM20 15h-2v2h2v-2zM22 13v2h-2v-2h2zM13 15h2v-2h-2v2zM15 17h-2v2h2v-2zM17 19h2v-2h-2v2zM19 21h2v-2h-2v2zM21 19v2h-2v-2h2z" />
            </svg>
            <span class="tab-name">Generate QR</span>
          </div>
          <div class="tab live-feature-tab" data-tab="live-account-linking">
            <svg class="tab-icon" viewBox="0 0 24 24">
              <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
            </svg>
            <span class="tab-name">Account Linking</span>
          </div>
        </div>
        <!-- Live QR Tab Content -->
        <div id="live-generate-qr-content" class="tab-content active">
          <input id="qrInputLive" type="text" placeholder="Enter text or URL" class="input-field w-full p-3 rounded mb-2 focus:outline-none focus:ring-2 focus:ring-blue-500" value="" />
          <p class="text-sm text-info mb-4"> QR code will be generated automatically as you type. </p>
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2 text-title">QR Code Size:</label>
            <select id="sizeSelectorLive" class="size-selector">
              <option value="200">Small (200x200px)</option>
              <option value="256" selected>Medium (256x256px)</option>
              <option value="400">Large (400x400px)</option>
              <option value="600">Extra Large (600x600px)</option>
            </select>
          </div>
          <div class="mt-6 flex justify-center">
            <div class="qr-container">
              <div id="qrcodeLive"></div>
            </div>
          </div>
          <div class="mt-6" id="downloadSectionLive" style="display: none;">
            <h3 class="text-lg font-semibold mb-3 text-title">Download QR Code</h3>
            <div class="flex flex-wrap justify-center">
              <button id="downloadPNGLive" class="action-btn">Download PNG</button>
              <button id="downloadSVGLive" class="action-btn">Download SVG</button>
              <button id="downloadPDFLive" class="action-btn">Download PDF</button>
            </div>
          </div>
        </div>
        <!-- Live Account Linking Tab Content -->
        <div id="live-account-linking-content" class="tab-content">
          <div class="py-6">
            <div class="text-center mb-6">
              <svg class="mx-auto mb-4 w-16 h-16 text-info" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
              </svg>
              <h3 class="text-xl font-semibold mb-4 text-title">Account Linking (Live)</h3>
            </div>
            <div class="mb-6 text-left">
              <p class="text-sm text-info mb-4"> Input the <strong>auth_code</strong> that is generated from <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded text-xs font-mono italic">...v1.0/get-auth-code</code> here. </p>
              <p class="text-sm text-info mb-4"> e.g: <strong>168319834608511432</strong> and hit "Enter" or click "Initiate Account Linking" </p>
            </div>
            <div class="mb-6">
              <input id="authCodeInputLive" type="text" placeholder="Enter the auth-code here" class="input-field w-full p-3 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div class="text-center">
              <button id="proceedButtonLive" class="action-btn bg-green-600 hover:bg-green-700 w-full"> Initiate Account Linking </button>
            </div>
            <div class="mt-4 text-center">
              <p class="text-xs text-info"> reference: <a href="https://product.shopeepay.co.id/integration/api/account-linking/go/#initiate-account-linking" target="_blank" class="text-blue-600 hover:text-blue-800 underline">https://product.shopeepay.co.id/.../#initiate-account-linking</a>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script>
      // --- Helper function to get URL parameters ---
      function getUrlParameter(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
      }
      // --- Page Switching Logic ---
      function showPage(pageId) {
        document.querySelectorAll('.page-content').forEach(page => page.classList.remove('active'));
        const body = document.body;
        body.classList.remove('bg-uat', 'bg-live');
        if (pageId === 'uat-page') {
          body.classList.add('bg-uat');
        } else if (pageId === 'live-page') {
          body.classList.add('bg-live');
        }
        document.getElementById(pageId).classList.add('active');
      }
      document.getElementById('show-uat').addEventListener('click', () => showPage('uat-page'));
      document.getElementById('show-live').addEventListener('click', () => showPage('live-page'));
      document.getElementById('back-to-menu-uat').addEventListener('click', () => showPage('main-menu'));
      document.getElementById('back-to-menu-live').addEventListener('click', () => showPage('main-menu'));
      // --- QR Code Generation Logic for UAT ---
      const qrInputUat = document.getElementById('qrInputUat');
      const qrcodeDivUat = document.getElementById('qrcodeUat');
      const sizeSelectorUat = document.getElementById('sizeSelectorUat');
      const downloadSectionUat = document.getElementById('downloadSectionUat');
      let qrUat;

      function initializeQrCodeUat() {
        const initialText = qrInputUat.value.trim();
        let currentSize = parseInt(sizeSelectorUat.value);
        if (!qrUat) {
          qrUat = new QRCode(qrcodeDivUat, {
            text: initialText || ' ',
            width: currentSize,
            height: currentSize,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.H
          });
        } else {
          qrUat.makeCode(initialText || ' ');
        }
        downloadSectionUat.style.display = initialText ? 'block' : 'none';
      }
      qrInputUat.addEventListener('input', () => {
        const value = qrInputUat.value.trim();
        if (value) {
          qrUat.makeCode(value);
          downloadSectionUat.style.display = 'block';
        } else {
          qrUat.clear();
          downloadSectionUat.style.display = 'none';
        }
      });
      sizeSelectorUat.addEventListener('change', () => {
        let currentSize = parseInt(sizeSelectorUat.value);
        qrcodeDivUat.innerHTML = '';
        qrUat = new QRCode(qrcodeDivUat, {
          text: qrInputUat.value.trim() || ' ',
          width: currentSize,
          height: currentSize,
          colorDark: "#000000",
          colorLight: "#ffffff",
          correctLevel: QRCode.CorrectLevel.H
        });
      });
      // --- QR Code Download Logic for UAT ---
      function getQRCanvas(qrcodeDiv) {
        return qrcodeDiv.querySelector('canvas');
      }
      document.getElementById('downloadPNGUat').addEventListener('click', () => {
        const canvas = getQRCanvas(qrcodeDivUat);
        if (canvas) {
          const link = document.createElement('a');
          link.download = `uat-qrcode-${sizeSelectorUat.value}x${sizeSelectorUat.value}.png`;
          link.href = canvas.toDataURL();
          link.click();
        }
      });
      document.getElementById('downloadSVGUat').addEventListener('click', () => {
        const canvas = getQRCanvas(qrcodeDivUat);
        if (canvas) {
          const size = canvas.width;
          const qrData = qrUat._o.text;
          const tempQr = document.createElement('div');
          new QRCode(tempQr, {
            text: qrData,
            width: size,
            height: size
          });
          const tempCanvas = tempQr.querySelector('canvas');
          const tempCtx = tempCanvas.getContext('2d');
          const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
          const pixels = imageData.data;
          const modulePixelSize = qrUat._o.width / qrUat._o.modules.length;
          let svg = `
				<svg
					xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" viewBox="0 0 ${size} ${size}">`;
          svg += `
					<rect width="100%" height="100%" fill="#ffffff"/>`;
          for (let row = 0; row < qrUat._o.modules.length; row++) {
            for (let col = 0; col < qrUat._o.modules.length; col++) {
              const x = Math.floor(col * modulePixelSize + modulePixelSize / 2);
              const y = Math.floor(row * modulePixelSize + modulePixelSize / 2);
              const index = (y * tempCanvas.width + x) * 4;
              if (pixels[index] === 0 && pixels[index + 1] === 0 && pixels[index + 2] === 0) {
                svg += `
					<rect x="${col * modulePixelSize}" y="${row * modulePixelSize}" width="${modulePixelSize}" height="${modulePixelSize}" fill="#000000"/>`;
              }
            }
          }
          svg += `
				</svg>`;
          const svgBlob = new Blob([svg], {
            type: 'image/svg+xml;charset=utf-8'
          });
          const svgUrl = URL.createObjectURL(svgBlob);
          const link = document.createElement('a');
          link.download = `uat-qrcode-${sizeSelectorUat.value}x${sizeSelectorUat.value}.svg`;
          link.href = svgUrl;
          link.click();
          URL.revokeObjectURL(svgUrl);
        }
      });
      document.getElementById('downloadPDFUat').addEventListener('click', () => {
        const canvas = getQRCanvas(qrcodeDivUat);
        if (canvas && window.jsPDF) {
          const {
            jsPDF
          } = window.jsPDF;
          const currentSize = parseInt(sizeSelectorUat.value);
          const pdfSize = currentSize > 400 ? 'a4' : 'a5';
          const pdf = new jsPDF({
            orientation: 'portrait',
            unit: 'mm',
            format: pdfSize
          });
          const pageWidth = pdf.internal.pageSize.getWidth();
          const pageHeight = pdf.internal.pageSize.getHeight();
          const qrSizeMM = Math.min(pageWidth - 20, pageHeight - 20, 80);
          const x = (pageWidth - qrSizeMM) / 2;
          const y = (pageHeight - qrSizeMM) / 2;
          const imgData = canvas.toDataURL('image/png');
          pdf.addImage(imgData, 'PNG', x, y, qrSizeMM, qrSizeMM);
          pdf.setFontSize(10);
          pdf.text(qrInputUat.value, pageWidth / 2, y + qrSizeMM + 10, {
            align: 'center'
          });
          pdf.save(`uat-qrcode-${currentSize}x${currentSize}.pdf`);
        }
      });
      // --- QR Code Generation Logic for LIVE ---
      const qrInputLive = document.getElementById('qrInputLive');
      const qrcodeDivLive = document.getElementById('qrcodeLive');
      const sizeSelectorLive = document.getElementById('sizeSelectorLive');
      const downloadSectionLive = document.getElementById('downloadSectionLive');
      let qrLive;

      function initializeQrCodeLive() {
        const initialText = qrInputLive.value.trim();
        let currentSize = parseInt(sizeSelectorLive.value);
        if (!qrLive) {
          qrLive = new QRCode(qrcodeDivLive, {
            text: initialText || ' ',
            width: currentSize,
            height: currentSize,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.H
          });
        } else {
          qrLive.makeCode(initialText || ' ');
        }
        downloadSectionLive.style.display = initialText ? 'block' : 'none';
      }
      qrInputLive.addEventListener('input', () => {
        const value = qrInputLive.value.trim();
        if (value) {
          qrLive.makeCode(value);
          downloadSectionLive.style.display = 'block';
        } else {
          qrLive.clear();
          downloadSectionLive.style.display = 'none';
        }
      });
      sizeSelectorLive.addEventListener('change', () => {
        let currentSize = parseInt(sizeSelectorLive.value);
        qrcodeDivLive.innerHTML = '';
        qrLive = new QRCode(qrcodeDivLive, {
          text: qrInputLive.value.trim() || ' ',
          width: currentSize,
          height: currentSize,
          colorDark: "#000000",
          colorLight: "#ffffff",
          correctLevel: QRCode.CorrectLevel.H
        });
      });
      // --- QR Code Download Logic for LIVE ---
      document.getElementById('downloadPNGLive').addEventListener('click', () => {
        const canvas = getQRCanvas(qrcodeDivLive);
        if (canvas) {
          const link = document.createElement('a');
          link.download = `live-qrcode-${sizeSelectorLive.value}x${sizeSelectorLive.value}.png`;
          link.href = canvas.toDataURL();
          link.click();
        }
      });
      document.getElementById('downloadSVGLive').addEventListener('click', () => {
        const canvas = getQRCanvas(qrcodeDivLive);
        if (canvas) {
          const size = canvas.width;
          const qrData = qrLive._o.text;
          const tempQr = document.createElement('div');
          new QRCode(tempQr, {
            text: qrData,
            width: size,
            height: size
          });
          const tempCanvas = tempQr.querySelector('canvas');
          const tempCtx = tempCanvas.getContext('2d');
          const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
          const pixels = imageData.data;
          const modulePixelSize = qrLive._o.width / qrLive._o.modules.length;
          let svg = `
				<svg
					xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" viewBox="0 0 ${size} ${size}">`;
          svg += `
					<rect width="100%" height="100%" fill="#ffffff"/>`;
          for (let row = 0; row < qrLive._o.modules.length; row++) {
            for (let col = 0; col < qrLive._o.modules.length; col++) {
              const x = Math.floor(col * modulePixelSize + modulePixelSize / 2);
              const y = Math.floor(row * modulePixelSize + modulePixelSize / 2);
              const index = (y * tempCanvas.width + x) * 4;
              if (pixels[index] === 0 && pixels[index + 1] === 0 && pixels[index + 2] === 0) {
                svg += `
					<rect x="${col * modulePixelSize}" y="${row * modulePixelSize}" width="${modulePixelSize}" height="${modulePixelSize}" fill="#000000"/>`;
              }
            }
          }
          svg += `
				</svg>`;
          const svgBlob = new Blob([svg], {
            type: 'image/svg+xml;charset=utf-8'
          });
          const svgUrl = URL.createObjectURL(svgBlob);
          const link = document.createElement('a');
          link.download = `live-qrcode-${sizeSelectorLive.value}x${sizeSelectorLive.value}.svg`;
          link.href = svgUrl;
          link.click();
          URL.revokeObjectURL(svgUrl);
        }
      });
      document.getElementById('downloadPDFLive').addEventListener('click', () => {
        const canvas = getQRCanvas(qrcodeDivLive);
        if (canvas && window.jsPDF) {
          const {
            jsPDF
          } = window.jsPDF;
          const currentSize = parseInt(sizeSelectorLive.value);
          const pdfSize = currentSize > 400 ? 'a4' : 'a5';
          const pdf = new jsPDF({
            orientation: 'portrait',
            unit: 'mm',
            format: pdfSize
          });
          const pageWidth = pdf.internal.pageSize.getWidth();
          const pageHeight = pdf.internal.pageSize.getHeight();
          const qrSizeMM = Math.min(pageWidth - 20, pageHeight - 20, 80);
          const x = (pageWidth - qrSizeMM) / 2;
          const y = (pageHeight - qrSizeMM) / 2;
          const imgData = canvas.toDataURL('image/png');
          pdf.addImage(imgData, 'PNG', x, y, qrSizeMM, qrSizeMM);
          pdf.setFontSize(10);
          pdf.text(qrInputLive.value, pageWidth / 2, y + qrSizeMM + 10, {
            align: 'center'
          });
          pdf.save(`live-qrcode-${currentSize}x${currentSize}.pdf`);
        }
      });
      // --- UAT Tab Switching Logic ---
      document.querySelectorAll('.uat-feature-tab').forEach(tab => {
        tab.addEventListener('click', () => {
          document.querySelectorAll('.uat-feature-tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('#uat-page .tab-content').forEach(content => content.classList.remove('active'));
          tab.classList.add('active');
          const tabName = tab.getAttribute('data-tab');
          document.getElementById(tabName + '-content').classList.add('active');
        });
      });
      // --- Live Tab Switching Logic ---
      document.querySelectorAll('.live-feature-tab').forEach(tab => {
        tab.addEventListener('click', () => {
          document.querySelectorAll('.live-feature-tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('#live-page .tab-content').forEach(content => content.classList.remove('active'));
          tab.classList.add('active');
          const tabName = tab.getAttribute('data-tab');
          document.getElementById(tabName + '-content').classList.add('active');
        });
      });
      // --- Account Linking Logic ---
      /**
       * Creates and displays a modal with a custom message.
       * @param {string} message The message to display in the alert.
       */
      function showAlertModal(message) {
        const modalId = 'alertModalOverlay';
        const existingModal = document.getElementById(modalId);
        if (existingModal) {
          existingModal.remove();
        }
        const modalOverlay = document.createElement('div');
        modalOverlay.id = modalId;
        modalOverlay.className = 'modal-overlay';
        modalOverlay.innerHTML = `
            
				<div class="modal-content">
					<h2 class="modal-title">Alert</h2>
					<p class="modal-text">${message}</p>
					<button class="close-button" id="closeAlertModal">OK</button>
				</div>
        `;
        document.body.appendChild(modalOverlay);
        const closeModal = () => document.body.removeChild(modalOverlay);
        document.getElementById('closeAlertModal').addEventListener('click', closeModal);
        modalOverlay.addEventListener('click', (e) => {
          if (e.target === modalOverlay) closeModal();
        });
      }
      /**
       * Shows a confirmation modal before proceeding.
       * @param {string} message The confirmation message (can include HTML).
       * @param {function} onConfirm The callback function to execute on confirmation.
       */
      function showConfirmModal(message, onConfirm) {
        const modalId = 'confirmModalOverlay';
        const existingModal = document.getElementById(modalId);
        if (existingModal) {
          existingModal.remove();
        }
        const modalOverlay = document.createElement('div');
        modalOverlay.id = modalId;
        modalOverlay.className = 'modal-overlay';
        modalOverlay.innerHTML = `
            
				<div class="modal-content">
					<h2 class="modal-title">Please Confirm</h2>
					<p class="modal-text">${message}</p>
					<div class="flex justify-center">
						<button class="close-button" id="cancelConfirmModal">Cancel</button>
						<button class="action-btn" id="proceedConfirmModal" style="background-color: #34a853;">Proceed</button>
					</div>
				</div>
        `;
        document.body.appendChild(modalOverlay);
        const closeModal = () => document.body.removeChild(modalOverlay);
        document.getElementById('cancelConfirmModal').addEventListener('click', closeModal);
        document.getElementById('proceedConfirmModal').addEventListener('click', () => {
          onConfirm();
          closeModal();
        });
        modalOverlay.addEventListener('click', (e) => {
          if (e.target === modalOverlay) closeModal();
        });
      }
      // UAT Linking
      const authCodeInputUat = document.getElementById('authCodeInputUat');
      const proceedButtonUat = document.getElementById('proceedButtonUat');
      proceedButtonUat.addEventListener('click', () => {
        const authCode = authCodeInputUat.value.trim();
        if (!authCode || authCode.length < 10) {
          showAlertModal('Please enter a valid auth_code (at least 10 characters).');
          authCodeInputUat.focus();
          return;
        }
        const baseUrl = 'https://uat.shopee.co.id/payment/account-linking/pre-link?authCode=';
        const confirmationMessage = `You are about to open the ShopeePay linking page in a new tab.
				<br>
					<br>
						<strong>Please scan the QR code with your ShopeePay/Shopee UAT app to proceed.</strong>`;
        showConfirmModal(confirmationMessage, () => window.open(baseUrl + authCode, '_blank'));
      });
      authCodeInputUat.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') proceedButtonUat.click();
      });
      // Live Linking
      const authCodeInputLive = document.getElementById('authCodeInputLive');
      const proceedButtonLive = document.getElementById('proceedButtonLive');
      proceedButtonLive.addEventListener('click', () => {
        const authCode = authCodeInputLive.value.trim();
        if (!authCode || authCode.length < 10) {
          showAlertModal('Please enter a valid auth_code (at least 10 characters).');
          authCodeInputLive.focus();
          return;
        }
        const baseUrl = 'https://shopee.co.id/payment/account-linking/pre-link?authCode=';
        const confirmationMessage = `You are about to open the ShopeePay linking page in a new tab.
						<br>
							<br>
								<strong>Please scan the QR code with your ShopeePay/Shopee Live app to proceed.</strong>`;
        showConfirmModal(confirmationMessage, () => window.open(baseUrl + authCode, '_blank'));
      });
      authCodeInputLive.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') proceedButtonLive.click();
      });
      // --- AuthCode extraction and auto-fill on page load ---
      window.onload = function() {
        const extractedAuthCode = getUrlParameter('auth_code');
        const extractedEnv = getUrlParameter('env');
        if (extractedAuthCode) {
          console.log("Extracted AuthCode from URL:", extractedAuthCode);
          if (extractedEnv === 'live') {
            authCodeInputLive.value = extractedAuthCode;
            showPage('live-page');
            document.querySelector('.live-feature-tab[data-tab="live-account-linking"]').click();
          } else {
            authCodeInputUat.value = extractedAuthCode;
            showPage('uat-page');
            document.querySelector('.uat-feature-tab[data-tab="uat-account-linking"]').click();
          }
        } else {
          console.log("No auth_code or environment found in the URL.");
        }
        initializeQrCodeUat();
        initializeQrCodeLive();
      };
    </script>
  </body>
</html>
